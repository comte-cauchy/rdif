#include <cstdlib>
#include <iostream>
#include <vector>
#include <cmath>
#include "plotGrid.hpp"
#include <cmath>
#include <omp.h>
using namespace std;

int main(int argc, char* argv[])
{
	//parameters
	const unsigned long nx = 256;
	const unsigned long ny = 256;
	const unsigned long nz = 256;
	const double dimx = .5;
	const double dimy = .5;
	const double dimz = .5;
	const double dt = 1;	

	const double ru = 2e-4;
	const double rv = 1e-4;
	const double f = 0.03;
	const double k = 0.06;
	 
	const unsigned long maxiter = (argc>1?atoi(argv[1]):100);
		
	//init
	const unsigned long n = nx*ny*nz;
	const unsigned int dx = 1;
	const unsigned int dy = nx;
	const unsigned long dz = nx*ny;

	const double hinvx = 2*nx/dimx;
	const double hinvy = 2*ny/dimy;
	const double hinvz = 2*nz/dimz;
	
	//vector<double> u(n,1.0);
	//vector<double> v(n,0.0);
	//vector<double> u_old(u);
	//vector<double> v_old(v);
	//vector<double> w(n,-2*dt*(hinvx+hinvy+hinvz));
	
	double* tmp;
	double* u = new double[n];
	double* v = new double[n];
	double* u_old = new double[n];
	double* v_old = new double[n];
	double* wu = new double[n];
	double* wv = new double[n];
	for (int i = 0;i<n;i++)
		u[i]=1.0;
	for (int i = 0;i<n;i++)
		v[i]=0.0;
	for (int i = 0;i<n;i++)
		u_old[i]=u[i];
	for (int i = 0;i<n;i++)
		v_old[i]=v[i];
	for (int i = 0;i<n;i++)
		wu[i]=-2*dt*(hinvx+hinvy+hinvz);
	for (int i = 0;i<n;i++)
		wv[i]=-2*dt*(hinvx+hinvy+hinvz);

	
	for(int z = 0;z<nz;z++)
	{
		for(int y = 0;y<ny;y++)
		{
			for(int x = 0;x<nx;x++)
			{
				unsigned long i = x + nx*y + nx*ny*z;
				wu[i] += dt*((x==0?hinvx:0)+(x==nx-1?hinvx:0) + (y==0?hinvy:0)+(y==ny-1?hinvy:0) + (z==0?hinvz:0)+(z==nz-1?hinvz:0));
				wv[i] += dt*((x==0?hinvx:0)+(x==nx-1?hinvx:0) + (y==0?hinvy:0)+(y==ny-1?hinvy:0) + (z==0?hinvz:0)+(z==nz-1?hinvz:0));
			}
		}
	}
	for (int i = 0;i<n;i++)
		wu[i]*=ru;
	for (int i = 0;i<n;i++)
		wv[i]*=rv;
	
	SDLInterface plotter(nx,ny,nz,nz/2);

	for(int z = 0;z<nz;z++)
	{
		for(int y = 118;y<138;y++)
		{
			for(int x = 118;x<138;x++)
			{
				unsigned long i = x + nx*y + nx*ny*z;
				u[i] = 0.5;
				v[i] = 0.25;
			}
		}
	}
	
	for(int i = 0;i<n;i++)
	{
		double r1 = (double)rand()/RAND_MAX;
		double r2 = (double)rand()/RAND_MAX;
		double tmp = sqrt(-2*log(r1));
		u[i]*=(1+(1+tmp*sin(2*M_PI*r2))*0.01);
		v[i]*=(1+(1+tmp*cos(2*M_PI*r2))*0.01);
		u[i] = min(1.0,max(0.0,u[i]));
		v[i] = min(1.0,max(0.0,v[i]));
	}


	//iterations
	double start = omp_get_wtime();
//	cout << iter < maxiter << ' ' << plotter.quit() << endl;
	for(unsigned int iter = 0;iter<maxiter && !plotter.quit();iter++)
	//for(unsigned int iter = 0;iter<maxiter ;iter++)
	{
		//cout << iter << endl;
		if (!(iter%100))
			plotter.plotGrid(u,v);
		
		tmp = u;
		u = u_old;
		u_old = tmp;
		tmp = v;
		v = v_old;
		v_old = tmp;
		
		//for(int z = 0;z<nz;z++)
		//{
		//	for(int y = 0;y<ny;y++)
		//	{
		//		for(int x = 0;x<nx;x++)
		//		{	
		//			unsigned long i = x+nx*y+nx*ny*z;
		//			double ux = (x+1 < nx?u_old[i+dx]:u_old[i])+(x-1>=0?u_old[i-dx]:u_old[i])-2*u_old[i];
		//			double uy = (y+1 < ny?u_old[i+dy]:u_old[i])+(y-1>=0?u_old[i-dy]:u_old[i])-2*u_old[i];
		//			double uz = (z+1 < nz?u_old[i+dz]:u_old[i])+(z-1>=0?u_old[i-dz]:u_old[i])-2*u_old[i];
		//			double vx = (x+1 < nx?v_old[i+dx]:v_old[i])+(x-1>=0?v_old[i-dx]:v_old[i])-2*v_old[i];
		//			double vy = (y+1 < ny?v_old[i+dy]:v_old[i])+(y-1>=0?v_old[i-dy]:v_old[i])-2*v_old[i];
		//			double vz = (z+1 < nz?v_old[i+dz]:v_old[i])+(z-1>=0?v_old[i-dz]:v_old[i])-2*v_old[i];
		//			u[i] = u_old[i]+dt*ru*(hinvx*ux + hinvy*uy + hinvz*uz);
		//			v[i] = v_old[i]+dt*rv*(hinvx*vx + hinvy*vy + hinvz*vz);
		//		}
		//	}
		//}
		//cout << "Applying self-contribution"<<endl;
		for(int i = 0;i<n;i++)
		{
			u[i] = u_old[i] + wu[i]*u_old[i];//2 flop
			v[i] = v_old[i] + wv[i]*v_old[i];//2 flop
		} 

		//cout << "Applying remaining diffusion terms"<<endl;
		for(int z = 0;z<nz;z++)
		{
			for(int y = 0;y<ny;y++)
			{
				for(int x = 0;x<nx-1;x++)
				{	
					unsigned long i = x+nx*y+nx*ny*z;
					u[i] += dt*ru*hinvx*(u_old[i+dx]);//3 flop
					v[i] += dt*rv*hinvx*(v_old[i+dx]);//3 flop
				}
				for(int x = 1;x<nx;x++)
				{	
					unsigned long i = x+nx*y+nx*ny*z;
					u[i] += dt*ru*hinvx*(u_old[i-dx]);//3 flop
					v[i] += dt*rv*hinvx*(v_old[i-dx]);//3 flop
				}
			}
		}
		for(int z = 0;z<nz;z++)
		{
			for(int y = 0;y<ny-1;y++)
			{
				for(int x = 0;x<nx;x++)
				{	
					unsigned long i = x+nx*y+nx*ny*z;
					u[i] += dt*ru*hinvy*(u_old[i+dy]);//3 flop
					v[i] += dt*rv*hinvy*(v_old[i+dy]);//3 flop'
				}
			}
			for(int y = 1;y<ny;y++)
			{
				for(int x = 0;x<nx;x++)
				{	
					unsigned long i = x+nx*y+nx*ny*z;
					u[i] += dt*ru*hinvy*(u_old[i-dy]);//3 flop
					v[i] += dt*rv*hinvy*(v_old[i-dy]);//3 flop
				}
			}
		}
		
		for(int z = 0;z<nz-1;z++)
		{
			for(int y = 0;y<ny-1;y++)
			{
				for(int x = 0;x<nx;x++)
				{	
					unsigned long i = x+nx*y+nx*ny*z;
					u[i] += dt*ru*hinvz*(u_old[i+dz]);//3 flop
					v[i] += dt*rv*hinvz*(v_old[i+dz]);//3 flop
				}
			}
		}
		for(int z = 1;z<nz;z++)
		{
			for(int y = 0;y<ny;y++)
			{
				for(int x = 0;x<nx;x++)
				{	
					unsigned long i = x+nx*y+nx*ny*z;
					u[i] += dt*ru*hinvz*(u_old[i-dz]);//3 flop
					v[i] += dt*rv*hinvz*(v_old[i-dz]);//3 flop
				}
			}
		}
		

		//cout << "Applying reaction and feed terms"<<endl;
		for(int i = 0;i<n;i++)
		{	double reaction_quantity = u[i]*v[i]*v[i];//2
			u[i] -= dt*(reaction_quantity - f*(1-u[i]));//5
			v[i] += dt*(reaction_quantity - (f+k)*v[i]);//5
		}
	}
	double time = omp_get_wtime()-start;
	unsigned long long ops = maxiter*(16l*nx*ny*nz+12l*nx*ny*(nz-1l)+12l*nx*(ny-1)*nz+12l*(nx-1l)*ny*nz);
    	cout << "Time [s]:" << time << endl;
    	cout << "GFLOP:" << ops/1e9 << endl;
	cout << "GFLOP/s:" << ops/time/1e9 << endl;
	
	plotter.plotGrid(u,v);
	
	return 0;
}
